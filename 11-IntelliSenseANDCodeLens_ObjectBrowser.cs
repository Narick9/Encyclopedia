/*
 * creation date  02 jan 2020
 * last change    31 jul 2021
 * author         artur
 */
using System;
using System.Text;
using System.Numerics;

class IntelliSenseANDCodeLens_ObjectBrowser
{
    static void Main()
    {
        Console.WriteLine("***** _ *****");

        IntelliSenseANDCodeLens_Silent();
        ObjectBrowser_Silent();

        Console.ReadLine();
    }
    static void IntelliSenseANDCodeLens_Silent()
    {
        Console.WriteLine(">->->->->->->->->->->->->->->->->->->   IntelliSenseANDCodeLens_Silent()\n");


        // В VS есть великое средство - IntelliSense, что может дополнить имя функции/переменной/класса/.. по нажатии одной кнопки - Tab. Эта
        //   штука также всегда знает, что ты можешь вставить после операции . (точки). Воистину божественная вещь


        // Здесь у тебя есть очень полезная возможность перейти на код определения нужного типа, если ты тыкнешь ЛКМ на него в коде и нажмёшь
        //   F12 (если прям туда переходить не хочешь, можешь нажать Ctrl-Shift-F10. Так у тебя между строк как-бы выйдет окошко с тем же
        //   куском кода с определением). Если тип определён в твоей сборке, то тебя перенесёт к самому этому самому опредлению, но если нужный
        //   тип пришёл из подключённой сборки, то тебе выдастся, т.с., восстановленная версия его начинки (т.е. без пробелов и пропусков)
        //   /////////after reading///////////////////////////////////////////////////////////////////////
        //   //   (восстановленная из метаданных)(правда, операторы в этом восстановленном определении
        //   //   отображаться не будут. ****почему?)
        //   /////////////////////////////////////////////////////////////////////////////////////////////


        // Ещё ты в любом месте кода можешь нажать Ctrl-Space, то IntelliSense предложит тебе вставить что-то подходящее по контексту (том
        //   месте выйдет окно с этими предложениями)
        // Ты также можешь trigger'нуть parameter hints, нажав Ctrl-Shift-Space. Это сработает для того, что под курсором
        //
        // Вообще, окно предложений в других случаях появляется само собой
        // Если ты нажмёшь эту пару после использования оператора точки у чего-то (например, после ввода    Console.    ), т.е. когда там уже
        //   открыто окно с предложениями, то IntelliSense покажет тебе более детальное определение текущего предложения из списка (в окошке
        //   рядом)(Ctrl+Space здесь как-бы переключатель включения/выключения этого окошка при следующих предложениях) числе и snippet'ы
        //   (заметь, что предложения делятся на категории. У snippet'ов особый знак)


        // Для VS Code (Code OSS. А может даже и для VS). Если IntelliSense считает, что твой код неподходящий, он подчеркнёт его волнистой
        //   линией. Ты затем можешь кликнуть мышкой по этому коду (или нажать Ctrl-., если твой текстовый курсор уже там), чтобы вывести
        //   список quick fix'ов


        // "CodeLens" - так  прозвали штуку, что поставялет всякие вкрапления в код (между строчек). В VS она появилась с выходом 2013-ой
        //   версии. Вроде как она не входит в IntelliSense
        //
        // Видишь .. reference над каждым методом (над локальными функциями он не отображается, кстати)? Ну так вот, этот счётчик выдаёт
        //   частоту их использования в коде. Эти вкрапления поставляются CodeLens'ом
        // В VS Code отключить вывод инфо о использовании ссылок можно, добавив в ~/.config/Code/User/settings.json строку
        //       "editor.codeLens": false
        // Вв гайде (https://code.visualstudio.com/docs/languages/csharp) говориться, что инфо о количестве использований методов из класса
        //   object не даётся из-за соображений производительности. ****Но ведь узнать число использований, например, Console.WriteLine() тоже
        //   нельзя


        //****однаждый вычитал (https://stackoverflow.com/questions/29975152/intellisense-not-automatically-working-vscode), что IntelliSense
        //    VS Code'а (что поставляется в составе расширения C#) настолько продвинут, что гнушится работать с проектами без <project>.json
        //    файла (или на худой конец .sln'а)


        // Однажды IntelliSense у меня никак не хотел запускаться. Логи OmniSharp'а говорили об этой ошибке:
        //
        //       [fail]: OmniSharp.MSBuild.ProjectManager
        //       Attempted to update project that is not loaded:  d:\...\CommonShareableTypes.csproj
        //
        //   Решением стала правка отной настройки в settings.json VS Code'а, а точнее добавление этой настройки:
        //       {
        //           ..
        //           "omnisharp.path": "latest",    // "omnisharp.path": - можно задать и прямой путь к .exe'шнику OmniSharp'а. Можно оставить
        //           ..                             //   и просто пустую строку, и будет задействована версия OmniSharp, привязанная к
        //       }                                  //   расширению C#. Ещё есть вариант поставить строку "latest" (как здесь), и будет загружен
        //                                          //   OmniSharp последней версии


        // VS Code'овский IntelliSense довольно таки ленив. Установку новой библиотеки заметит только после перезапуска (****проверено на
        //   1-ой библиотеке)


        Console.WriteLine("<-<-<-<-<-<-<-<-<-<-<-<-<-<-<-<-<-<-<   IntelliSenseANDCodeLens_Silent()");
    }
    static void ObjectBrowser_Silent()
    {
        Console.WriteLine(">->->->->->->->->->->->->->->->->->->   ObjectBrowser_Silent()\n");


        // Окно Object Browser покажет тебе в структурированном виде все сборки, пространства имён и их начинки. Также ты можешь прочитать
        //   краткое описание каждого типа и члена
        // Его можно открыть несколькими путями. Стандартный - это тыкнуть по View -> Object Browser. Второй - тыкнуть Solution Explorer ->
        //   -> Solution '..'.. -> .. -> References -> некая сборка (ПКМ) -> View in Object Browser
        // По умолчанию тебе выведится список сборок, подключённых к проекту (в том числе и твоей текущей), но это легко изменить через
        //   раскрывающийся список, подписанный как Browse: в верхней части окна (изначально там выбрано My Solution)


        Console.WriteLine("<-<-<-<-<-<-<-<-<-<-<-<-<-<-<-<-<-<-<   ObjectBrowser_Silent()");
    }
}