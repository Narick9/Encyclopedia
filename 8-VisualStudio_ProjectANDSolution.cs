/*
 * creation date  30 dec 2020
 * last change    26 jun 2021
 * author         artur
 */
using System;
using System.Configuration;

class VisualStudio_ProjectANDSolution
{
    static void Main()
    {
        Console.WriteLine("*****_*****");

        VisualStudio_Silent();
        ProjectANDSolution_Silent();

        Console.ReadLine();
    }
    static void VisualStudio_Silent()
    {
        Console.WriteLine(">->->->->->->->->->->->->->->->->->->   VisualStudio_Silent()\n");


        // Вообще, Visual Studio - это универсальный инструмент для разработки программного обеспечения с помощью платформы .NET и языка C#.
        //
        //
        // Вопреку том, что ты мог подумать, не все IDE производства Microsoft платные. Вообще, выпускаются 3-и версии нашей любой VS:
        //
        //   > Visual Studio Community
        //   > Visual Studio Professional
        //   > Visual Studio Enterprise
        //
        //   До 2017 была ещё одна бесплатная версия - Express с немного другой лицензией, но её выпилили. Редакции Professional и Community по
        //   существу одинаковы. Главное их техническое отличие лишь в том, что Professional имеет некое средство CodeLens, а Community - нет.
        //   Гораздо большую роль играет лицензирование. Community лицензируется для использования с проектами с открытым исходным кодом, в
        //   учебных учреждениях и малых предприятиях. Версия Professional лицензируется для крупномасштабной разработки
        // А что Enterprise? А Enterprise предлагает то же, что и Professional, но с добавлением множества дополнительных средств для
        //   огранизации совместной корпоративной разработки и поддержки мультиплатформенных приложений с помощью Xamarin
        // На самом деле почти всегда плантные версии VS покупаются не самими разработчиками, а компаниями, на которые они работают
        //
        //
        // Троелсен пишет с расчётом на то, что всякий читающий будет использовать Visual Studio Community
        //
        // Если раньше (до VS 2017) на одной машине могла стоять только одна редакция VS, то теперь этого ограничения нет
        //
        // Вся энциклопедия (что ты читаешь) была написана с использованием VS Community 2019
        //   /////////after reading:VSCode,dotnet/////////////////////////////////////////////////////////
        //   // (и в другие времена с использованием VS Code и утилиты dotnet)
        //   /////////////////////////////////////////////////////////////////////////////////////////////


        // Ну и последний аспект VS с которым ты должен быть знаком с самого начала - это полностью интегрированная справочная система. По
        //   заверению автора, документация .NET Framework - это исключительно хороший, понятный (при знании инглиша. русский перевод -
        //   машинный) и насыщенный полезной информацией источник (хотя иногда там путают близкие понятия). По факту, является единственным
        //   полным справочником для .NET, поэтому без заглядывания туда на постоянной основе вряд ли ты сможет сделать поистине элегантный
        //   код (непереполненный велосипедами)
        

        // Для конфигурирования VS'ки
        //   /////////after reading///////////////////////////////////////////////////////////////////////
        //   // (и её расширений)
        //   /////////////////////////////////////////////////////////////////////////////////////////////
        //   мелкомягкие сделали окно Options. Открыть его можно, забив в строку поиска (..) Options (ещё Options можно открыть из некторых
        //   меню верхней строки)


        // VS поддерживает такие полезные штуки, как snippet'ы. Это такие сокращения для записей. Например, можное ввести где-нибудь в коде
        //       cw    и нажать Tab дважды. В итоге вставится Console.WriteLine() с курсором в скобках. Полный список всех snippet'ов можно
        //   посмотреть в ПКМ где-нибудь в редакторе -> Snippet


        // Что за кнопка со значком канцелярской кнопки у каждого окна? Это кнопка называется Auto Hide (не путать с Toggle pin status), и она
        //   может перевести окно в особый режим, если ты на неё нажмёшь


        // Если ты хочешь сбросить схему окон (их расположений), жми Window -> Reset Window Layout. Эта возможность может помочь тебе однажды


        /////////after reading:Breakpoints///////////////////////////////////////////////////////////
        // Про breakpoint'ы можешь почитать в специально выделенном для них методе
        /////////////////////////////////////////////////////////////////////////////////////////////


        // VS автоматом создаёт в папке проекта подпапки и файл    .\.vs\<ИмяПроекта>\v16\.suo    (.vs - скрытая папка)(v16 -
        //   ****что это значит?, suo - Solution User Option), что хранит какую-то инфу пользователя
        //   /////////after reading:Breakpoints///////////////////////////////////////////////////////////
        //   // (вроде номеров строк для breakpoint'ов)
        //   /////////////////////////////////////////////////////////////////////////////////////////////


        // Есть 2-е конфигурации постройки приложений - Debug и Release. При Debug конфигурации программка будет скомпилирована с полной debug
        //   инфой (вроде инфы о номерах строк к каждой команде)(это сильно прибавляет выходной программке в весе. ****разницы по весу между
        //   Debug и Release не обнаружено, хотя на C++ hello world в Debug режиме весил 12 мегабайт!) и вообще без оптимизации (т.к. она
        //   усложняет debug'ество). Release же версия твоей проги уже (по идее) должна быть пригодна, чтоб ею могли пользоваться настоящие
        //   люди
        // По умолчанию в проектах выставлен Debug режим


        // VS постоянно бэкапит твой файл. Т.е. если после 8-ми часовой работы ВНЕЗАПНО отключат свет, а ты не помнишь того, что хоть раз
        //   нажимал Ctrl+S, то не волнуйся, VS предложит восстановить всё при следующем своём включении


        // Хочешь сделать вертикальную линию, чтоб видеть где стоит притормозить? На самом деле такой в функции в VS нет. Раньше (до VS 2012)
        //   она была, но переключать её приходилось через реестр (Microsoft'цы, вообще, не считали это полезным). В наши дни же это можно
        //   замутить только расширением. Все кому это надо, ставят Editor Guidelines (для установки нужно перезапустить VS)
        // С Editor Guidelines'ом вертикальная линия ставится в начале столбца (а не в конце, как в православном vim'е). Ставится мышкой, прямо
        //   из editor'а - ПКМ (поставь этим курсор там, где нужна линия) -> Guidelines (здесь всё меню расширения) -> Add Guideline. Ставить
        //   можно много линий. Цвет этих штриховый полосок можно изменить через меню Options -> Environment -> Fonts and Colors ->
        //   Display items: -> Guideline


        /////////after reading: Domains//////////////////////////////////////////////////////////////
        // При нажатии F5 (т.е. запуска твоего кода в Debug режиме), VS подключит к домену твоей
        //   сборки кучу других сборок (.dll'шек), что присосуться к нему (оно и понятно, этож Debug
        //   режим). Чуть поподробнее ты можешь почитать в методе о Domains
        /////////////////////////////////////////////////////////////////////////////////////////////


        // Вместе с Visual Studio поставляется компилятор C#'па - csc.exe. Работает по образу и подобию к gcc (****но это не точно), т.е.
        //   достаточно написать так:
        //
        //       csc HelloProgram.cs
        //
        

        // У VS'ки есть своё поле Search для нахождения разных штук из её начинки. Этот поиск ты видишь в верхнем меню VS'дии (строка поиска
        //   идёт после других меню). Как видишь, для этой строки есть shortcut Ctrl-Q
        //
        // Если ты хочешь сделать поиск по файлам, нажми Ctrl-Shift-F. Также можешь нажать Ctrl-Shift-H, чтобы перейти сразу в раздел для
        //   замены в файлах в том же окне (окне, что открывается при Ctrl-Shift-F)
        //
        // Если ты хочешь провести быстрый поиск по файлу, нажми Ctrl-F. Также можешь нажать Ctrl-H, чтобы перейти сразу в раздел для замены в
        //   том же окне (окне, что открывается при Ctrl-H)
        
        // Для отмены последнего действия достаточно нажать Ctrl-Z (или Edit -> Undo). А если ты выделил что-то не то, нажми ESC
        //   ****про ESC здесь лишнее? или эта кнопка имеет здесь глубинный смысл?

        // Если ты хочешь


        // Workload
        //
        //   "workload" - в терминах developer'ов-.NET'овцев под этим словом понимают коллекцию фреймворков, библиотек, инструментов и других
        //     штуковин, что нужны для постройки текущего решения


        Console.WriteLine("<-<-<-<-<-<-<-<-<-<-<-<-<-<-<-<-<-<-<   VisualStudio_Silent()");
    }
    static void ProjectANDSolution_Silent()
    {
        Console.WriteLine(">->->->->->->->->->->->->->->->->->->   ProjectANDSolution_Silent()\n");


        // При старте Visual Studio 2019 открывается окно ..Visual Studio 2019 со списком недавних проектов и набором кнопок для открытия и
        //   создания проектов
        // Проекты создаются через окно Create a new project, что открывается или через стартовое окно Visual Studio 2019 ->
        //   Create a new project, или из самой VS, пройдя по File -> New -> Project... (почти все мои проекты, кстати, создавались из шаблона
        //   Empty Project. Так я знаю как всё работает, и ничего не происходит без меня). Если ты создашь проект, находять уже в
        //   существующем, VS сразу (возможно, с предложением сохранения) закроект текущий проект, и перейдёт в новый
        /////////after reading:dotnet////////////////////////////////////////////////////////////////
        // В утилитке dotnet кнопок, конечно же, нету. Зато там есть подраздел dotnet new для
        //   создания проектов и не только
        /////////////////////////////////////////////////////////////////////////////////////////////
        //
        //
        // На момент написания книги (2017) VS не поддерживала создание проектов на C# 7.1, но задействовать новые средства можно 2-мя
        //   способами. 1-й способ - это правка файла проекта вручную, а 2-й - просто задействовать какое-нибудь средство из новой версии языка
        //   , чтобы VS сама предложила обновить этот файл (жёлтой лампочкой, что представляет быстрое исправление). Как говорит автор, 2-й
        //   способ ненадёжен
        // Файл проекта - это файл с именем проекта расширения .csproj с XML начинкой, находящийся в главной папке проекта. Чтобы поставить
        //   желаемую весрию C#'а, следует просто добавить элемент    <LangVersion>7.1</LangVersion>    в элементное тело нужного
        //   <PropertyGroup> (элементов <PropertyGroup> там много, они отличаются атрибутами Condition. Condition'ы есть для Realise и для
        //   Debug)
        // Самый простетский .csproj файл выглядит так
        //   /////////after reading:dotnet////////////////////////////////////////////////////////////////
        //   // (этот создан через dotnet)
        //   /////////////////////////////////////////////////////////////////////////////////////////////
        //   :
        //               <Project Sdk="Microsoft.NET.Sdk">
        //
        //                 <PropertyGroup>
        //                   <TargetFramework>net5.0</TargetFramework>  // net5.0 - версия .NET'а, на который расчитан проект. Ты легко можешь
        //                 </PropertyGroup>                             //   вручную менять это значение вручную (только на совместимый с твоим
        //                                                              //   проектом framework. Ты не сможешь этим параметром мигрировать
        //               </Project>                                     //   между .NET (в прошлом .NET Core) и .NET Framework
        //                                                              //   /////////after reading////////////////////////////////////////////
        //                                                              //   // (чуть ниже описано чё делать, если ты таки хочешь мигрировать)
        //                                                              //   //////////////////////////////////////////////////////////////////
        //
        //
        // Окно свойств проекта (Project -> .. Properties или Solution Explorer -> Solution '..'.. -> .. (ПКМ) -> Properties), кстати, работает
        //   именно с этим файлом. Ещё через это окно можно задавать аргументы коммандной строки (через его меню Debug -> Start options ->
        //   -> Command line arguments)
        //
        //
        // В VS для запуска проекта в текущем режиме следует нажать кнопку Start на панели инструментов (кнопка с зелёной стрелкой вверху), но
        //   чуть менее, чем все привыкли использовать hotkey'и для этого. Чтобы запустить проект в режиме отладки достаточно нажать F5. Для
        //   запуска без отладки - ^F5 (Ctrl+F5)

        /////////after reading:dotnet////////////////////////////////////////////////////////////////
        // Про то, как создавать проекты через dotnet cli, написано в методе про dotnet cli. Проекты
        //   , что были созданы им, в VS также легко можно открывать. Разве что пользоваться ими
        //   придётся немного по-другому (в местах описания таких мест, где нужно работать немного
        //   по-другому, я описал различия. Например, в методе про подключание сборок в VS есть
        //   различие)
        /////////////////////////////////////////////////////////////////////////////////////////////


        /////////after reading:LinkingAssemblies/////////////////////////////////////////////////////
        // Про то, как подключать к проекту разделяемые и закрытые сборки, написано чуть позже
        /////////////////////////////////////////////////////////////////////////////////////////////


        // Если ты хочешь мигрировать с .NET Framework на .NET (в прошлом .NET Core), то придётся таки создавать новый проект, т.к. они
        //   немного не совместимы по структуре. Дальше просто замени старый проект этим новым
        // В файле dotnetCoreVersion.csproj есть остатки моих попыток мигрировать (и комментарий к ним)


        // Как ты, наверное, заметил, в Solution Explorer сначала идёт Solution .. , и только затем следует имя проекта. Это может сбить с
        //   толку незнакомого с VS человека. Ну так вот, решения задуманы как решения (..) твоей проблемы. Например, ты хочешь создать некую
        //   игру. Здесь игра и станет решением. Каждое решение состоит из проектов. Каждый проект - это будущая сборка. Один проект выдаст
        //   библиотку для графики, другой - для логики, и т.д. . Должен быть и главный проект - тот, что выпустит .exe файл игры
        //
        //
        // Связка проектов в решение автоматически знакомит их сборки друг с другом
        //
        //  
        // По умолчанию имя решения совпадает с именем первого проекта, но почти всегда это исправляют
        /////////after reading:TrueOfReflectionLateBindingAttributes/////////////////////////////////////////////////////
        // Дальше будет показано, как добавлять другие проекты в решение MyExtenableApp, как
        //   указывать ссылки на проекты для подключения, как задать действия по построению и
        //   определять запускаемый проект этого решения (в общем, интересности)
        // Почему я решил рассказать об это позже? Просто там в одном месте объясняется куча всего
        //   близкого, и объяснение всего этого по отдельности было бы долгим и более скучным
        /////////////////////////////////////////////////////////////////////////////////////////////
        //
        //
        // Сейчас мы находимся в решении dotnetCoreVersion (и файл этого решения - ./dotnetCoreVersion.sln). В решении можно создать новые
        //   проекты или добавить существующие (при создании нового создаётся самый обычный проект, и
        //   его автоматически связывают с решением)
        //
        // Чтоб в решении создать новый проект (допустим, проект JustAdditionalProject), следует прямо отсюда (из VS), пройдя по меню
        //   File -> Add -> New Project.., тыкнуть на интерисующий шаблон уже там (я всегда создаю Empty Project..)(это в случае VS)
        // Второй способ создать сразу же связанный проект - это пройти по Solution Explorer -> Solution '..' (ПКМ) -> Add -> New Project..
        /////////after reading:dotnet////////////////////////////////////////////////////////////////
        // В случае dotnet же нельзя автоматом одной командой создать и привязать проект в
        //   решении (в консолях такие сложности - моветон. те, кому это действительно надо, уже
        //   давно создали скрипты)
        /////////////////////////////////////////////////////////////////////////////////////////////
        //
        // Для привязки существующих проектов следует пройти по File -> Add -> Existing Project..., и выбрать нужный тебе файл проекта
        //   (.csproj файл. Не путать с .sln)
        //
        //
        // Если всё прошло ок, то Solution Explorer под именем решения (т.е. под Solution ..) будет виден новопривязанный проект со всей его
        //   начинкой
        //
        //
        // Можно и просто связать проекта (****при этом автоматически создаётся решение?). Это делается через Solution Explorer ->
        //   References (ПКМ) -> Add Reference... Т.к. нам нужна
        //   ссылка на проект, то в левой части окна Reference Manager пройдём по Projects -> Solutions. В центральной части будут
        //   показаны уже связанные с этим проектом проекты. Достаточно поставить флаг перед желаемым проектом (VS сам позаботится о
        //   связи с нужной сборкой позже)
        //
        //
        // Если в твоём решении больше одного проекта, VS'ке нужно указать, какой именно будет выполняться при нажатии кнопки
        //   Start (или F5). По умолчанию запускаться будет первый добавленный проект (у нас это dotnetCoreVersion.csproj)(имя такого
        //   запускаемого проекта записано в Solution Explorer жирным шрифтом), но если ты хочешь изменить такой расклад, воспользуйся кнопкой
        //   Solution Explorer -> <нужныйТебеПроект> (ПКМ) -> Set as Startup Project
        // В VS 2017 кнопка Start имела имя Run, а кнопка Set as Startup Project называлась Set as StartUp Project
        //
        //
        /////////after reading:REST//////////////////////////////////////////////////////////////////
        // Запускаемыми могут быть сразу несколько проектов. Это можно задать в окне
        //   Solution .. Property '..' Pages (Solution Explorer -> -> Solution .. (.. of ..) (ПКМ)
        //   -> Set Startup Projects...****тут где-то не хватает круглой скобки. Этот приём может
        //   быть полезен, если решение содержит проект службы REST, созданной посредством Web-Api,
        //   и веб-приложение, что протребляет эту службу. Для выполнения веб-приложения служба REST
        //   также должна быть запущена
        /////////////////////////////////////////////////////////////////////////////////////////////
        //
        //
        // Когда ты нажимаешь на F5, VS автоматически перестраивает все проекты, от которых
        //   зависит главный (запускаемый), если в них были какие-то изменения. Если изменения произошли и с их зависимостями, цепочка
        //   перестройки продолжится (получается в VS встроенно что-то вроде утилиты Make. Microsoft'цы назвали это nmake, и ты можешь
        //   использовать её в cmd VS'ки). Чтобы сделать один проект зависимым от другого, достаточно поставить на него ссылку в блоке
        //   References.
        //   Проекты, что не учавствуют в древе зависимостей, строиться не будут
        // Вообще, древо зависимостей настраивается через окно Project Dependencies (Solution Explorer -> Solution '..' (.. of ..) (ПКМ) ->
        //   -> Project Dependencies...). Во вкладке Dependencies к каждому присутсвующему проекту флажками можно выставить зависимости.
        //   . Заметь, что у проектов, к которым уже и так есть ссылка, флажки недоступны
        // В этом окне (окне Project Dependencies) также есть вкладка Build Order, где ты увидишь порядок постройки проектов (сверху вниз)(да,
        //   те проекты, что вообще не будут строиться, там тоже присутсвуют и ничем не выделяются, разве что они находится ниже по очереди)
        /////////after reading:dotnet////////////////////////////////////////////////////////////////
        // К сожалению, dotnet не поддерживает зависимости. Но у красноглазиков есть Make, что
        //   облегчает жизнь с 1976'го
        /////////////////////////////////////////////////////////////////////////////////////////////


        Console.WriteLine("<-<-<-<-<-<-<-<-<-<-<-<-<-<-<-<-<-<-<   ProjectANDSolution_Silent()");
    }
}